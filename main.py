# Модуль 16
# Використання баз даних
# (частина 4)
# Завдання: Створення Простої Системи Чату з
# Використанням Мікросервісів server.py та client.py.
# Опис:
# Розробіть просту систему чату, яка складається з двох
# мікросервісів: сервера (`server.py`) та клієнта (`client.py`).
# Використовуйте Redis для зберігання повідомлень і статусів
# користувачів.
# Функціональність:
# 1. Сервер (server.py):
# - Встановлення з'єднання з Redis.
# - Очікування повідомлень від клієнтів.
# - Зберігання повідомлень у Redis.
# - Відправлення повідомлень іншим клієнтам.
# 2. Клієнт (client.py):
# - Підключення до сервера.
# - Відправлення повідомлень через сервер.
# - Отримання повідомлень від сервера.
# Технічні Вимоги:
# 1. Python:
# - Використання Python для написання server.py та client.py.
# - Використання бібліотеки redis-py для взаємодії з Redis.
# 2. Redis:
# - Використання Redis як брокера повідомлень.
# 3. Комунікація:
# - Використання TCP/IP для комунікації між сервером та
# клієнтами.
# Реалізація:
# 1. server.py:
# - Відкриття серверного сокета.
# - Прийняття вхідних підключень від клієнтів.
# - Читання повідомлень від клієнтів та зберігання їх у Redis.
# - Розсилка повідомлень від одного клієнта іншим
# підключеним клієнтам.
# 2. client.py:
# - Підключення до сервера.
# - Відправлення повідомлень до сервера.
# - Отримання та відображення повідомлень від сервера.
# Інструкції:
# - Слід зосередитись на основній логіці комунікації та
# обміну повідомленнями.
# - Важливо протестувати взаємодію між клієнтом та
# сервером, а також відповідне зберігання повідомлень у
# Redis.
# Результат:
# Це завдання дозволить вам розібратися з основами
# мережевого програмування, взаємодією з Redis, та
# розробкою простих мікросервісів на Python.

